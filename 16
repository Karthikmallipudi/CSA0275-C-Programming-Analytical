#include <stdio.h>
#include <stdlib.h>
#include <string.h>
char* longestPalindrome(char* s) {
    int n = strlen(s);
    if (n == 0) return ""; 
    int dp[n][n];
    memset(dp, 0, sizeof(dp)); 
    int start = 0; 
    int maxLength = 1; 
    for (int i = 0; i < n; i++)
        dp[i][i] = 1;
    for (int i = 0; i < n - 1; i++) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = 1;
            start = i;
            maxLength = 2;
        }
    }
    for (int len = 3; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1; 
            if (dp[i + 1][j - 1] && s[i] == s[j]) {
                dp[i][j] = 1;
                if (len > maxLength) {
                    start = i;
                    maxLength = len;
                }
            }
        }
    }
    char* result = malloc(maxLength + 1  );
    strncpy(result, s + start, maxLength);
    result[maxLength] = '\0';
    return result;
}
int main() {
    char s[100];
    printf("Enter a string: ");
    scanf("%s", s);
    char* longestPalindromicSubstring = longestPalindrome(s);
    printf("Longest palindromic substring: %s\n", longestPalindromicSubstring);
    free(longestPalindromicSubstring); 
    return 0;
}
